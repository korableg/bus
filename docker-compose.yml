version: '3.9'
services:
  kafka:
    container_name: kafka
    image: bitnami/kafka:latest   
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - dev_net
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 3s
      timeout: 20s
      retries: 5
  
  # kafka-ui:
  #   container_name: kafka-ui
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
  #     KAFKA_CLUSTERS_0_METRICS_PORT: 9998
  #     DYNAMIC_CONFIG_ENABLED: 'true'
  #   networks:
  #     - dev_net
  
  kafka_topics:
    container_name: kafka_topics
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - dev_net
    command: bash -c "
      kafka-topics.sh --create --topic test_topic --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 \
      && kafka-topics.sh --create --topic test_topic_2 --bootstrap-server kafka:9092"

networks:
  dev_net:
    driver: bridge